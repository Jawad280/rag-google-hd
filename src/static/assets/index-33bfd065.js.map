{"version":3,"mappings":"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","names":["Layout","jsxs","styles","jsx","Link","Outlet","BACKEND_URI","chatApi","request","RetrievalMode","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useState","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","DEFAULT_EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","parseSupportingContentItem","item","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","ThoughtProcess","thoughts","t","k","SyntaxHighlighter","MarkdownViewer","src","setContent","isLoading","setIsLoading","setError","removeAnchorLinks","html","ancorLinksRegex","response","markdownText","parsedHtml","marked","cleanedHtml","Spinner","SpinnerSize","MessageBar","MessageBarType","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","citation","setCitation","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","VectorSettings","updateRetrievalMode","retrievalMode","setRetrievalMode","onRetrievalModeChange","option","Dropdown","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","retrieveCount","setRetrieveCount","useAdvancedFlow","setUseAdvancedFlow","lastQuestionRef","useRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","makeApiRequest","a","parsedResponse","e","clearChat","onPromptTemplateChange","onTemperatureChange","range","event","onRetrieveCountChange","onUseAdvancedFlowChange","checked","example","onShowCitation","onToggleTab","tab","streamedAnswer","q","Fragment","SparkleFilled","Panel","DefaultButton","Checkbox","SpinButton","Slider","layout","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../frontend/src/pages/layout/Layout.tsx","../../frontend/src/api/api.ts","../../frontend/src/api/models.ts","../../frontend/src/components/Answer/AnswerParser.tsx","../../frontend/src/components/Answer/AnswerIcon.tsx","../../frontend/src/components/Answer/Answer.tsx","../../frontend/src/components/Answer/AnswerLoading.tsx","../../frontend/src/components/Answer/AnswerError.tsx","../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../frontend/src/components/Example/Example.tsx","../../frontend/src/components/Example/ExampleList.tsx","../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../frontend/src/pages/chat/Chat.tsx","../../frontend/src/index.tsx"],"sourcesContent":["import { Outlet, Link } from \"react-router-dom\";\n\nimport styles from \"./Layout.module.css\";\n\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>RAG on database</h3>\n                    </Link>\n                    <h4 className={styles.headerRightText}>OpenAI + PostgreSQL</h4>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","const BACKEND_URI = \"\";\n\nimport { ChatAppRequest } from \"./models\";\n\nexport async function chatApi(request: ChatAppRequest): Promise<Response> {\n    return await fetch(`${BACKEND_URI}/chat`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(request)\n    });\n}","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport type ChatAppRequestOverrides = {\n    use_advanced_flow?: boolean;\n    retrieval_mode?: RetrievalMode;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ResponseChoice = {\n    index: number;\n    message: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppResponseOrError = {\n    choices?: ResponseChoice[];\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    choices: ResponseChoice[];\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n};","import { renderToStaticMarkup } from \"react-dom/server\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { ChatAppResponse } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const followupQuestions = answer.choices[0].context.followup_questions;\n    const messageContent = answer.choices[0].message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.choices[0].context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.choices[0].context.data_points}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>Citations:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.citation} title={x}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nconst DEFAULT_EXAMPLES: string[] = [\n    \"Best shoe for hiking?\",\n    \"Climbing gear cheaper than $30?\",\n    \"Waterproof camping gear?\",\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {DEFAULT_EXAMPLES.map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import DOMPurify from \"dompurify\";\n\ntype ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {textItems.map((c, ind) => {\n                const parsed = parseSupportingContentItem(c);\n                return (\n                    <li className={styles.supportingContentItem} key={ind}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\n                    </li>\n                );\n            })}\n            {imageItems?.map((img, ind) => {\n                return <img className={styles.supportingContentItemImage} src={img.url} key={ind} />;\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Stack } from \"@fluentui/react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { Thoughts } from \"../../api\";\n\ninterface Props {\n    thoughts: Thoughts[];\n}\n\nexport const ThoughtProcess = ({ thoughts }: Props) => {\n    return (\n        <ul className={styles.tList}>\n            {thoughts.map((t, ind) => {\n                return (\n                    <li className={styles.tListItem} key={ind}>\n                        <div className={styles.tStep}>{t.title}</div>\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\n                            {t.props &&\n                                (Object.keys(t.props) || []).map((k: any) => (\n                                    <span className={styles.tProp}>\n                                        {k}: {JSON.stringify(t.props?.[k])}\n                                    </span>\n                                ))}\n                        </Stack>\n                        {Array.isArray(t.description) ? (\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock}>\n                                {JSON.stringify(t.description, null, 2)}\n                            </SyntaxHighlighter>\n                        ) : (\n                            <div>{t.description}</div>\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { marked } from \"marked\";\nimport styles from \"./MarkdownViewer.module.css\";\nimport { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\n\ninterface MarkdownViewerProps {\n    src: string;\n}\n\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\n    const [content, setContent] = useState<string>(\"\");\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<Error | null>(null);\n\n    /**\n     * Anchor links are not handled well by 'marked' and result in HTTP 404 errors as the URL they point to does not exist.\n     * This function removes them from the resulted HTML.\n     */\n    const removeAnchorLinks = (html: string) => {\n        const ancorLinksRegex = /<a\\s+(?:[^>]*?\\s+)?href=['\"](#[^\"']*?)['\"][^>]*?>/g;\n        return html.replace(ancorLinksRegex, \"\");\n    };\n\n    useEffect(() => {\n        const fetchMarkdown = async () => {\n            try {\n                const response = await fetch(src);\n\n                if (!response.ok) {\n                    throw new Error(\"Failed loading markdown file.\");\n                }\n\n                const markdownText = await response.text();\n                const parsedHtml = await marked.parse(markdownText);\n                const cleanedHtml = removeAnchorLinks(parsedHtml);\n                setContent(cleanedHtml);\n            } catch (error: any) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMarkdown();\n    }, [src]);\n\n    return (\n        <div>\n            {isLoading ? (\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\n                </div>\n            ) : error ? (\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\n                        {error.message}\n                        <Link href={src} download>\n                            Download the file\n                        </Link>\n                    </MessageBar>\n                </div>\n            ) : (\n                <div>\n                    <IconButton\n                        className={styles.downloadButton}\n                        style={{ color: \"black\" }}\n                        iconProps={{ iconName: \"Save\" }}\n                        title=\"Save\"\n                        ariaLabel=\"Save\"\n                        href={src}\n                        download\n                    />\n                    <div className={`${styles.markdown} ${styles.markdownViewer}`} dangerouslySetInnerHTML={{ __html: content }} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\nimport { ThoughtProcess } from \"./ThoughtProcess\";\nimport { MarkdownViewer } from \"../MarkdownViewer\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.choices[0].context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.choices[0].context.data_points;\n    const isDisabledCitationTab: boolean = !activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n\n    const fetchCitation = async () => {\n        if (activeCitation) {\n            // Get hash from the URL as it may contain #page=N\n            // which helps browser PDF renderer jump to correct page N\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\n            const response = await fetch(activeCitation, {\n                method: \"GET\"\n            });\n            const citationContent = await response.blob();\n            let citationObjectUrl = URL.createObjectURL(citationContent);\n            // Add hash back to the new blob URL\n            if (originalHash) {\n                citationObjectUrl += \"#\" + originalHash;\n            }\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    const renderFileViewer = () => {\n        if (!activeCitation) {\n            return null;\n        }\n\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\n        switch (fileExtension) {\n            case \"png\":\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\n            case \"md\":\n                return <MarkdownViewer src={activeCitation} />;\n            default:\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\n        }\n    };\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Thought process\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.choices[0].context.thoughts || []} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"Supporting content\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.choices[0].context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"Citation\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                {renderFileViewer()}\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {\"Developer settings\"}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"Clear chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { RetrievalMode } from \"../../api\";\n\ninterface Props {\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n}\n\nexport const VectorSettings = ({ updateRetrievalMode }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Dropdown\n                label=\"Retrieval mode\"\n                options={[\n                    { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                    { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                    { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                ]}\n                required\n                onChange={onRetrievalModeChange}\n            />\n\n        </Stack>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Panel, DefaultButton, TextField, SpinButton, Slider, Checkbox } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\n\nimport styles from \"./Chat.module.css\";\n\nimport {\n    chatApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useAdvancedFlow, setUseAdvancedFlow] = useState<boolean>(true);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                context: {\n                    overrides: {\n                        use_advanced_flow: useAdvancedFlow,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        temperature: temperature\n                    }\n                },\n            };\n            const response = await chatApi(request);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            const parsedResponse: ChatAppResponseOrError = await response.json();\n            if (response.status > 299 || !response.ok) {\n                throw Error(parsedResponse.error || \"Unknown error\");\n            }\n            setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onTemperatureChange = (\n        newValue: number,\n        range?: [number, number],\n        event?: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent\n    ) => {\n        setTemperature(newValue);\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseAdvancedFlowChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseAdvancedFlow(!!checked);\n    }\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>Product chat</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"Type a new question (e.g. does my plan cover annual eye exams?)\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useAdvancedFlow}\n                        label=\"Use advanced flow with query rewriting and filter formulation. Not compatible with Ollama models.\"\n                        onChange={onUseAdvancedFlowChange}\n                    />\n\n                    <h3>Settings for database search:</h3>\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many matching rows:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n\n                    <VectorSettings\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\n                    />\n\n\n                    <h3>Settings for final chat completion:</h3>\n\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <Slider\n                        className={styles.chatSettingsSeparator}\n                        label=\"Temperature\"\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        defaultValue={temperature}\n                        onChange={onTemperatureChange}\n                        showValue\n                        snapToStep\n                    />\n\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout = <Layout />;\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-33bfd065.js"}